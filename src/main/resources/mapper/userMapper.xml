<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace 映射文件路径-->
<mapper namespace="net.zyc.store.mapper.UserMapper">
    <!--resultMap 自定义映射规则
    id: 给映射规则分配id值 （resultMap的值）
    type： 是一个类 表示数据库的查询结果与java中的某个类映射

映射的两个：
    column: 表中的列名称
    property： 类中的属性名称

注意：无论是否一致 id必不可少
    -->
    <resultMap id="UserEntityMap" type="net.zyc.store.entity.User">
    <!--    将表的字段和类的属性不一致的字段进行匹配， 名称一致的字段可以不写-->
        <id column="uid" property="uid"></id>
        <result column="is_delete" property="isDelete"></result>
        <result column="created_user" property="createdUser"></result>
        <result column="created_time" property="createdTime"></result>
        <result column="modified_user" property="modifiedUser"></result>
        <result column="modified_time" property="modifiedTime"></result>
    </resultMap>


<!--    id： 表示接口中方法的名称-->
<!--    useGeneratedKeys: 开启某个字段的自增-->
<!--    keyProperty  指定主键-->
    <insert id="insert" useGeneratedKeys="true" keyProperty="uid">
        INSERT INTO t_user (
            username,
            password,
            salt,
            phone,
            email,
            gender,
            avatar,
            is_delete,
            created_user,
            created_time,
            modified_user,
            modified_time
        )
        VALUES(
            #{username},
            #{password},
            #{salt},
            #{phone},
            #{email},
            #{gender},
            #{avatar},
            #{isDelete},
            #{createdUser},
            #{createdTime},
            #{modifiedUser},
            #{modifiedTime}
        )
    </insert>

<!--    SELECT
查询一个对象
查询多个对象

resultType 查询出来的对应的类的类型，包含完整的类结构
resultMap 表的字段和类的字段不一致时————自定义映射规则
-->
    <select id="findByUsername" resultMap="UserEntityMap">
        SELECT * FROM t_user WHERE username=#{username}
    </select>

    <update id="updatePasswordByUid">
        UPDATE t_user SET
                            password=#{password},
                            modified_user=#{modifiedUser},
                            modified_time=#{modifiedTime}
                            where uid=#{uid}
    </update>

    <select id="findByUid" resultMap="UserEntityMap">
        SELECT * from t_user where uid=#{uid}
    </select>


    <update id="updateInfoByUid">
        UPDATE t_user
        SET
            phone=#{phone},
            email=#{email},
            gender=#{gender},
            modified_user=#{modifiedUser},
            modified_time=#{modifiedTime}
        WHERE uid=#{uid}
    </update>

    <update id="updateAvatarByUid">
        UPDATE t_user
        SET
            avatar=#{avatar},
            modified_user=#{modifiedUser},
            modified_time=#{modifiedTime}
        WHERE uid=#{uid}
    </update>
</mapper>